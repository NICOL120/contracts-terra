{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ExecuteMsg",
  "description": "This structure describes the execute messages of the contract.",
  "oneOf": [
    {
      "description": "Compound rewards to LP token",
      "type": "object",
      "required": [
        "compound"
      ],
      "properties": {
        "compound": {
          "type": "object",
          "required": [
            "lp_token",
            "rewards"
          ],
          "properties": {
            "lp_token": {
              "description": "LP into which the assets should be compounded into",
              "type": "string"
            },
            "no_swap": {
              "description": "Skip optimal swap",
              "type": [
                "boolean",
                "null"
              ]
            },
            "receiver": {
              "description": "Receiver address for LP token",
              "type": [
                "string",
                "null"
              ]
            },
            "rewards": {
              "description": "List of reward asset send to compound",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Asset"
              }
            },
            "slippage_tolerance": {
              "description": "slippage tolerance when providing LP",
              "anyOf": [
                {
                  "$ref": "#/definitions/Decimal"
                },
                {
                  "type": "null"
                }
              ]
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Creates a request to change the contract's ownership",
      "type": "object",
      "required": [
        "propose_new_owner"
      ],
      "properties": {
        "propose_new_owner": {
          "type": "object",
          "required": [
            "expires_in",
            "owner"
          ],
          "properties": {
            "expires_in": {
              "description": "The validity period of the proposal to change the owner",
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "owner": {
              "description": "The newly proposed owner",
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "update_config"
      ],
      "properties": {
        "update_config": {
          "type": "object",
          "properties": {
            "delete_lps": {
              "type": [
                "array",
                "null"
              ],
              "items": {
                "type": "string"
              }
            },
            "delete_routes": {
              "type": [
                "array",
                "null"
              ],
              "items": {
                "$ref": "#/definitions/RouteDelete"
              }
            },
            "factory": {
              "type": [
                "string",
                "null"
              ]
            },
            "insert_routes": {
              "type": [
                "array",
                "null"
              ],
              "items": {
                "$ref": "#/definitions/RouteInit"
              }
            },
            "remove_factory": {
              "type": [
                "boolean",
                "null"
              ]
            },
            "upsert_lps": {
              "type": [
                "array",
                "null"
              ],
              "items": {
                "$ref": "#/definitions/LpInit"
              }
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Removes a request to change contract ownership",
      "type": "object",
      "required": [
        "drop_ownership_proposal"
      ],
      "properties": {
        "drop_ownership_proposal": {
          "type": "object"
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Claims contract ownership",
      "type": "object",
      "required": [
        "claim_ownership"
      ],
      "properties": {
        "claim_ownership": {
          "type": "object"
        }
      },
      "additionalProperties": false
    },
    {
      "description": "The callback of type [`CallbackMsg`]",
      "type": "object",
      "required": [
        "callback"
      ],
      "properties": {
        "callback": {
          "$ref": "#/definitions/CallbackMsg"
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "Addr": {
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    },
    "Asset": {
      "title": "Description",
      "description": "This enum describes a Terra asset (native or CW20).",
      "type": "object",
      "required": [
        "amount",
        "info"
      ],
      "properties": {
        "amount": {
          "description": "A token amount",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        },
        "info": {
          "description": "Information about an asset stored in a [`AssetInfo`] struct",
          "allOf": [
            {
              "$ref": "#/definitions/AssetInfo"
            }
          ]
        }
      }
    },
    "AssetInfo": {
      "description": "This enum describes available Token types. ## Examples ``` # use cosmwasm_std::Addr; # use astroport::asset::AssetInfo::{NativeToken, Token}; Token { contract_addr: Addr::unchecked(\"terra...\") }; NativeToken { denom: String::from(\"uluna\") }; ```",
      "oneOf": [
        {
          "description": "Non-native Token",
          "type": "object",
          "required": [
            "token"
          ],
          "properties": {
            "token": {
              "type": "object",
              "required": [
                "contract_addr"
              ],
              "properties": {
                "contract_addr": {
                  "$ref": "#/definitions/Addr"
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Native token",
          "type": "object",
          "required": [
            "native_token"
          ],
          "properties": {
            "native_token": {
              "type": "object",
              "required": [
                "denom"
              ],
              "properties": {
                "denom": {
                  "type": "string"
                }
              }
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "CallbackMsg": {
      "description": "This structure describes the callback messages of the contract.",
      "oneOf": [
        {
          "description": "Performs optimal swap",
          "type": "object",
          "required": [
            "optimal_swap"
          ],
          "properties": {
            "optimal_swap": {
              "type": "object",
              "required": [
                "lp_token"
              ],
              "properties": {
                "lp_token": {
                  "type": "string"
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Provides liquidity to the pair contract",
          "type": "object",
          "required": [
            "provide_liquidity"
          ],
          "properties": {
            "provide_liquidity": {
              "type": "object",
              "required": [
                "lp_token",
                "prev_balances",
                "receiver"
              ],
              "properties": {
                "lp_token": {
                  "type": "string"
                },
                "prev_balances": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Asset"
                  }
                },
                "receiver": {
                  "type": "string"
                },
                "slippage_tolerance": {
                  "anyOf": [
                    {
                      "$ref": "#/definitions/Decimal"
                    },
                    {
                      "type": "null"
                    }
                  ]
                }
              }
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Decimal": {
      "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
      "type": "string"
    },
    "LpInit": {
      "type": "object",
      "required": [
        "commission_bps",
        "pair_contract",
        "slippage_tolerance",
        "wanted_token"
      ],
      "properties": {
        "commission_bps": {
          "description": "The swap commission",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "pair_contract": {
          "description": "The pair info",
          "type": "string"
        },
        "slippage_tolerance": {
          "description": "The slippage tolerance when providing liquidity",
          "allOf": [
            {
              "$ref": "#/definitions/Decimal"
            }
          ]
        },
        "wanted_token": {
          "description": "Token used for providing liquidity",
          "allOf": [
            {
              "$ref": "#/definitions/AssetInfo"
            }
          ]
        }
      }
    },
    "RouteDelete": {
      "type": "object",
      "required": [
        "from",
        "to"
      ],
      "properties": {
        "both": {
          "type": [
            "boolean",
            "null"
          ]
        },
        "from": {
          "$ref": "#/definitions/AssetInfo"
        },
        "to": {
          "$ref": "#/definitions/AssetInfo"
        }
      }
    },
    "RouteInit": {
      "oneOf": [
        {
          "type": "object",
          "required": [
            "path"
          ],
          "properties": {
            "path": {
              "type": "object",
              "required": [
                "route",
                "router",
                "router_type"
              ],
              "properties": {
                "route": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/AssetInfo"
                  }
                },
                "router": {
                  "type": "string"
                },
                "router_type": {
                  "$ref": "#/definitions/RouterType"
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "pair_proxy"
          ],
          "properties": {
            "pair_proxy": {
              "type": "object",
              "required": [
                "pair_contract"
              ],
              "properties": {
                "pair_contract": {
                  "type": "string"
                },
                "single_direction_from": {
                  "description": "when specified, a pair can be defined as a single direction",
                  "anyOf": [
                    {
                      "$ref": "#/definitions/AssetInfo"
                    },
                    {
                      "type": "null"
                    }
                  ]
                }
              }
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "RouterType": {
      "type": "string",
      "enum": [
        "astro_swap",
        "terra_swap",
        "token_swap"
      ]
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}

{"$schema":"http://json-schema.org/draft-07/schema#","title":"UserInfoResponse","description":"This structure holds the parameters for reward info query response","type":"object","required":["total_amp_lp","total_lp","user_amp_lp_amount","user_lp_amount"],"properties":{"total_amp_lp":{"$ref":"#/definitions/Uint128"},"total_lp":{"description":"Total lp balance of pool","allOf":[{"$ref":"#/definitions/Uint128"}]},"user_amp_lp_amount":{"description":"The share of total LP token bonded","allOf":[{"$ref":"#/definitions/Uint128"}]},"user_lp_amount":{"description":"The LP token amount bonded","allOf":[{"$ref":"#/definitions/Uint128"}]}},"additionalProperties":false,"definitions":{"Uint128":{"description":"A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```","type":"string"}}}
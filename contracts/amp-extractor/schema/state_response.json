{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "StateResponse",
  "type": "object",
  "required": [
    "exchange_rate_lp_stake",
    "exchange_rate_stake_uluna",
    "stake_available",
    "stake_balance",
    "stake_extracted",
    "stake_harvested",
    "total_lp",
    "tvl_uluna"
  ],
  "properties": {
    "exchange_rate_lp_stake": {
      "description": "The exchange rate between ustake and uluna, in terms of uluna per ustake",
      "allOf": [
        {
          "$ref": "#/definitions/Decimal"
        }
      ]
    },
    "exchange_rate_stake_uluna": {
      "description": "The exchange rate between the liquid staking derivate and uluna",
      "allOf": [
        {
          "$ref": "#/definitions/Decimal"
        }
      ]
    },
    "stake_available": {
      "$ref": "#/definitions/Uint128"
    },
    "stake_balance": {
      "description": "Total amount of uluna staked (bonded)",
      "allOf": [
        {
          "$ref": "#/definitions/Uint128"
        }
      ]
    },
    "stake_extracted": {
      "$ref": "#/definitions/Uint128"
    },
    "stake_harvested": {
      "$ref": "#/definitions/Uint128"
    },
    "total_lp": {
      "description": "Total supply to the lp token",
      "allOf": [
        {
          "$ref": "#/definitions/Uint128"
        }
      ]
    },
    "tvl_uluna": {
      "$ref": "#/definitions/Uint128"
    },
    "user_received_asset": {
      "anyOf": [
        {
          "$ref": "#/definitions/Uint128"
        },
        {
          "type": "null"
        }
      ]
    },
    "user_share": {
      "anyOf": [
        {
          "$ref": "#/definitions/Uint128"
        },
        {
          "type": "null"
        }
      ]
    }
  },
  "definitions": {
    "Decimal": {
      "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
      "type": "string"
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
